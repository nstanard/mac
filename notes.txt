
Git Config Stuff:
    fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*
    pushurl = do_not_push

    ls .git/refs/remotes
    git fetch -p

Login Shell setting:
System Preferences -> Users & Groups -> Click the lock -> Right click your user -> Advanced Options

# SCRIPT: bash "$MAC_SETUP_FOLDER/scripts/shell.sh"

# Failed:
# append_to_file "$shell_file" 'export PATH="$HOME/.bin:$PATH"'


# SCRIPT: bash "$MAC_SETUP_FOLDER/scripts/homebrew.sh"

# If you already installed node / npm...
# https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x
# https://stackoverflow.com/questions/10868133/cant-brew-link-an-unlinked-keg

# NOTES!
# icu4c is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides libicucore.dylib (but nothing else).

# If you need to have icu4c first in your PATH, run:
#   echo 'export PATH="/usr/local/opt/icu4c/bin:$PATH"' >> ~/.zshrc
#   echo 'export PATH="/usr/local/opt/icu4c/sbin:$PATH"' >> ~/.zshrc

# For compilers to find icu4c you may need to set:
#   export LDFLAGS="-L/usr/local/opt/icu4c/lib"
#   export CPPFLAGS="-I/usr/local/opt/icu4c/include"

# For pkg-config to find icu4c you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig"


<!-- https://gist.github.com/millermedeiros/6615994 -->
<!-- https://github.com/monfresh/laptop -->
<!-- https://github.com/thoughtbot/laptop -->

<!-- Hosts location: /etc/hosts -->

<!-- FONTS: -->
<!-- https://medium.datadriveninvestor.com/making-your-code-editor-feel-like-home-customizing-vs-code-b858d4938cb -->
<!-- https://rubjo.github.io/victor-mono/ -->
<!-- https://www.typography.com/blog/introducing-operator -->

<!-- TODO:

   Explore other peoples shortcuts and scripts:
      https://gist.github.com/kjbrum/77b7af04191267b053e9
      https://ostechnix.com/list-useful-bash-keyboard-shortcuts/
      https://github.com/fliptheweb/bash-shortcuts-cheat-sheet

      https://www.cyberciti.biz/tips/bash-aliases-mac-centos-linux-unix.html
      https://robertharder.wordpress.com/2011/03/17/bash-profile-sharing-and-useful-scripts/
      https://dev.to/aviaryan/some-helpful-bash-scripts-i-use-daily-40bd

   - Create a node.js wrapper to pick which parts to run... then execute the bash file passing in args to control which parts run?
      - https://opensource.com/article/18/7/node-js-interactive-cli

   - Add back:
      alias reload="source ~/.profile"
      alias code="open -a 'Visual Studio Code.app'"

      alias watch="npm run watch"
      alias test="npm run test"

      alias lc="alias"
      alias ll="ls -lsG"
      alias ls="exa --long --header --git"
      # DECLARABLES #
        export LSCOLORS="fafxcxdxbxegedabagacad"
        export ANDROID_HOME=$HOME/Library/Android/sdk
        export PATH=$PATH:$ANDROID_HOME//platform-tools
        #export PS1="$: "
        export PS1="[\u@\h \W]\\$ "

      # GITHUB #

      ghns ()
      {
      # make it read the existing .gitconfig file and make a backup with time in the name
      # write to ~/.gitconfig
      cat >  "$HOME/.gitconfig" <<EOF
      [user]
            name = Neal Stanard
            email = nstanard@gmail.com
            username = nstanard
      EOF

      cat >  "$HOME/.ssh/config" <<EOF
      Host github.com
            HostName github.com
            User git
            AddKeysToAgent yes
            UseKeychain yes
            IdentityFile ~/.ssh/id_rsa
            IdentitiesOnly yes
      EOF

      }

 -->

